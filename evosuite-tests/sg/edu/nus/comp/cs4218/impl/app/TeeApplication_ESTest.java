/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 18 10:08:55 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.app.TeeApplication;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class TeeApplication_ESTest extends TeeApplication_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(TeeApplication_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TeeApplication teeApplication0 = new TeeApplication();
          Boolean boolean0 = Boolean.FALSE;
          InputStream inputStream0 = InputStream.nullInputStream();
          String[] stringArray0 = new String[8];
          stringArray0[0] = "%";
          // Undeclared exception!
          try { 
            teeApplication0.teeFromStdin(boolean0, inputStream0, stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/sacchirro/Computer/nus/cs4218/cs4218-project-2022-team20/%\" \"write\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1598)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:838)
             // java.base/sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:257)
             // java.base/sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:143)
             // java.base/sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:156)
             // java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:217)
             // java.base/java.nio.file.Files.newByteChannel(Files.java:375)
             // java.base/java.nio.file.Files.createFile(Files.java:652)
             // sg.edu.nus.comp.cs4218.impl.app.TeeApplication.filterWritableFiles(TeeApplication.java:128)
             // sg.edu.nus.comp.cs4218.impl.app.TeeApplication.teeFromStdin(TeeApplication.java:69)
             // jdk.internal.reflect.GeneratedMethodAccessor68.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:564)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
             // java.base/java.lang.Thread.run(Thread.java:832)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = teeApplication0.teeFromStdin(boolean0, byteArrayInputStream0, stringArray0);
      assertEquals(": Is a directory\n: Is a directory\n\uFFFD\u0000\u0000\n", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = teeApplication0.teeFromStdin(boolean0, byteArrayInputStream0, stringArray0);
      assertEquals(": Is a directory\n: Is a directory\n: Is a directory\n: Is a directory\n\uFFFD\u0000\u0000\n", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test3()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[1];
      InputStream inputStream0 = InputStream.nullInputStream();
      try { 
        teeApplication0.run(stringArray0, inputStream0, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // tee: OutputStream not provided
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test4()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      String[] stringArray0 = new String[4];
      try { 
        teeApplication0.run(stringArray0, (InputStream) null, byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // tee: InputStream not provided
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test5()  throws Throwable  {
      TeeApplication teeApplication0 = new TeeApplication();
      String[] stringArray0 = new String[1];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = InputStream.nullInputStream();
      // Undeclared exception!
      try { 
        teeApplication0.run(stringArray0, inputStream0, byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.parser.ArgsParser", e);
      }
  }
}
