/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 18 09:58:18 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.app.GrepApplication;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class GrepApplication_ESTest extends GrepApplication_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(GrepApplication_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      InputStream inputStream0 = InputStream.nullInputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",u/d[jknb5*T()%_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try { 
        grepApplication0.run(stringArray0, inputStream0, mockPrintStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // grep: Pattern should not be empty.
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.GrepApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("t");
      String[] stringArray0 = new String[0];
      try { 
        grepApplication0.run(stringArray0, byteArrayInputStream0, mockPrintStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // grep: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.GrepApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Is a directory");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(standard input)";
      try { 
        grepApplication0.run(stringArray0, (InputStream) null, mockPrintStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // grep: No InputStream and no filenames
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.GrepApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      Boolean boolean0 = Boolean.FALSE;
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = grepApplication0.grepFromStdin("|<", boolean0, boolean0, boolean0, byteArrayInputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\n", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      Boolean boolean0 = Boolean.TRUE;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String[] stringArray0 = new String[0];
      String string0 = grepApplication0.grepFromFileAndStdin("", boolean0, boolean0, boolean0, byteArrayInputStream0, stringArray0);
      assertEquals("\n(standard input): 1\n", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      InputStream inputStream0 = InputStream.nullInputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Null Pointer Exception");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Invalid pattern syntax";
      grepApplication0.run(stringArray0, inputStream0, mockPrintStream0);
      assertEquals(1, stringArray0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      String[] stringArray0 = new String[13];
      stringArray0[0] = "Is a directory";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Is a directory");
      try { 
        grepApplication0.grepFromFiles("Null Pointer Exception", (Boolean) null, (Boolean) null, (Boolean) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.GrepApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Is a directory";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Is a directory");
      try { 
        grepApplication0.grepFromFiles("Is a directory", boolean0, boolean0, boolean0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      try { 
        grepApplication0.grepFromFiles("", boolean0, boolean0, boolean0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Is a directory";
      stringArray0[1] = "Null Pointer Exception";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pattern should not be empty.");
      grepApplication0.run(stringArray0, (InputStream) null, mockPrintStream0);
      assertEquals(2, stringArray0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.valueOf(false);
      String[] stringArray0 = new String[0];
      String string0 = grepApplication0.grepFromFiles("", boolean1, boolean1, boolean0, stringArray0);
      assertEquals("", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Is a directory";
      stringArray0[1] = "Is a directory";
      stringArray0[2] = "(standard input)";
      stringArray0[3] = "Null Pointer Exception";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(standard input)");
      grepApplication0.run(stringArray0, (InputStream) null, mockFileOutputStream0);
      grepApplication0.run(stringArray0, (InputStream) null, mockFileOutputStream0);
      assertEquals(4, stringArray0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      String[] stringArray0 = new String[2];
      Boolean boolean0 = Boolean.TRUE;
      try { 
        grepApplication0.grepFromFiles(stringArray0[0], boolean0, boolean0, boolean0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // grep: Null Pointer Exception
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.GrepApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      Boolean boolean0 = Boolean.valueOf("Pattern should not be empty.");
      try { 
        grepApplication0.grepFromFiles("..", boolean0, boolean0, boolean0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // grep: Null Pointer Exception
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.GrepApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      GrepApplication grepApplication0 = new GrepApplication();
      Boolean boolean0 = Boolean.TRUE;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String[] stringArray0 = new String[0];
      String string0 = grepApplication0.grepFromFileAndStdin("Is a directory", boolean0, boolean0, boolean0, byteArrayInputStream0, stringArray0);
      assertEquals("\n(standard input): 0\n", string0);
  }
}
